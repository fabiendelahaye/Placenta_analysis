---
title: "Analysis of eQTL"
output:
  pdf_document: default
  html_document: default
editor_options: 
  chunk_output_type: console
---

###I need to select of eqtl after permutations#### 

```{r}
options(stringsAsFactors=F)

eqtl=read.table("eqtl_perms_full.txt",header=F)

colnames(eqtl)=c("geneID","chr","start","stop","strand","n_variant_tested","dist","SNPID","chr_snp","start_snp","stop_snp","DF","Dummy","1st_parameter_beta","2nd_parameter_beta","nominal_PV","regression_slope","adj_PV","adj_PV_num")
```

###I need to adjust pvalue-FDR###

```{r}
FDReq=data.frame(eqtl,p.adjust(eqtl[,19],method="fdr"))
```

###select for FDR<5%

```{r}

sigeq=FDReq[which(FDReq[,20]<=0.05),]

write.table(sigeq,"eqtlsig.txt",sep="\t",col.names=F,row.names=F,quote=F)

'''

##I need to select for genotype cut-off and expression cut-of##

```{r}

expression=read.table("expression_eqtl.txt")

expression=expression[!duplicated(expression[,4]),]

genotype=read.table("genotype_eqtl.txt")

snp=unique(eqtl[,8])
genotype=merge(snp,genotype,by.x=1,by.y=2)
```

###count number of sample by genotype for each SNP because I have 80 sample the cutoff is at least 4 by genotype.

```{r}

a=as.matrix(genotype[,7:86])
number=matrix(ncol=3,nrow=nrow(genotype))
for(i in c(1:nrow(genotype))){
number[i,]=table(t(a[i,]))[1:3]}

number=data.frame(genotype[,1],number)

low=matrix(ncol=1,nrow=nrow(number))
for (i in c(1:nrow(number))){
low[i,]=min(number[i,2:4])}


number=data.frame(number,low)

eqtl_geno=merge(eqtl,genotype[,1:86],by.x=8,by.y=1)

eqtl_geno_num=merge(eqtl_geno,number,by=1)

eqtl_geno_num_exp=merge(eqtl_geno_num,expression,by.x=2,by.y=4)


select_eqtl=eqtl_geno_num_exp[which(eqtl_geno_num_exp[,109]>3),]

write.table(select_eqtl,"EQTL_filternumber_geno_expression.txt",sep="\t",col.names=T,row.names=F,quote=F)

```

###I create a score for each association as describe in the manuscript 

```{r}
score=(1-select_eqtl[,20])*abs(select_eqtl[,17])/log(abs(select_eqtl[,8])+2)

select_eqtl=data.frame(select_eqtl,score)

select_eqtl=select_eqtl[order(-select_eqtl[,195]),]

```

### I filter my dataset for score >0.05

```{r}

eqtl2=subset(select_eqtl,select_eqtl[,17]>=0.05)

colnames(eqtl2)=c("geneID","chr","start","stop","strand","n_variant_tested","dist","SNPID","chr_snp","start_snp","stop_snp","DF","Dummy","1st_parameter_beta","2nd_parameter_beta","nominal_PV","regression_slope","adj_PV","adj_PV_num","gene_name","score")

write.table(select_eqtl,"EQTL_filternumber_geno_expression_score.txt",sep="\t",col.names=T,row.names=F,quote=F)
```

### I look at enrichment using permutation

### Looking at enrichment based on level of expression

```{r}
eqtl=read.table("EQTL_filternumber_geno_expression_score.txt",header=T)

rank=read.table("rank_gene_expression_102816.txt")

rankeqtl=merge(rank,eqtl[,21],by=1)

y=data.frame(table(rankeqtl[,3]))

write.table(y,"rank_EQTL_placenta_090517.txt",sep="\t",col.names=F,row.names=F,quote=F)

for (i in c(1:1000)) { 
x=sample(1:nrow(rank),nrow(rankeqtl),replace=F)
a=rank[x,]
y=data.frame(table(a[,3]))
write.table(y,"rank_PERM_EQTL_placenta_090517.txt",quote=F,sep="\t",col.names=F,row.names=F,append=T)
}

### Looking at enrichment based on feature previously identified using ChromHMM 

```{r}
eqtl=read.table("EQTL_filternumber_geno_expression_score.txt",header=T)

feature=read.table("placenta_feature_chromHMM.bed")

#the function below call bedTools intersect within R
bedTools.2in<-function(functionstring="/public/apps/bedtools2/2.24.0/gcc.4.4.7/bin/intersectBed",bed1,bed2,opt.string="")
{
  #create temp files
  a.file=tempfile()
  b.file=tempfile()
  out   =tempfile()
  options(scipen =99) # not to use scientific notation when writing out
 
  #write bed formatted dataframes to tempfile
  write.table(bed1,file=a.file,quote=F,sep="\t",col.names=F,row.names=F)
  write.table(bed2,file=b.file,quote=F,sep="\t",col.names=F,row.names=F)
 
  # create the command string and call the command using system()
  command=paste(functionstring,"-a",a.file,"-b",b.file,opt.string,">",out,sep=" ")
  cat(command,"\n")
  try(system(command))
 
  res=read.table(out,header=F)
  unlink(a.file);unlink(b.file);unlink(out)
  return(res)
}


snpmap=read.table("ref_snp.txt",header=T) #list of SNP interrogated by Illumina Omni 2.5

snpref=data.frame(paste("chr",snpmap[,2],sep=""),snpmap[,3],snpmap[,3]+2,snpmap[,1])


all=bedTools.2in(bed1=feature,bed2=snpref,opt.string="-wa -wb")

inter=bedTools.2in(bed1=feature,bed2=data.frame(paste("chr",eqtl[,9],sep=""),eqtl[,10],eqtl[,10]+2,eqtl[,8]),opt.string="-wa -wb")

y=data.frame(table(inter[,4]))

write.table(y,"feature_EQTL_SNP.txt",sep="\t",col.names=F,row.names=F,quote=F)

write.table(all,"feature_ALL_SNP.txt",sep="\t",col.names=F,row.names=F,quote=F)


for (i in (1:1000)) { 
x=sample(1:nrow(all),nrow(inter),replace=F)
z=all[x,]
final=data.frame(table(z[,4]))
write.table(final,"feature_PERM_EQTL_SNP.txt",quote=F,sep="\t",col.names=F,row.names=F,append=T)
}
```

### Looking at enrichment based on annotation from Refseq 

```{r}
eqtl=read.table("EQTL_filternumber_geno_expression_score.txt",header=T)

annotation=read.table("~/data_from_home/output/PLACENTA/SNP/MATRIX_092016/annotation_refseq_111016.txt")


all2=bedTools.2in(bed1=annotation,bed2=snpref,opt.string="-wa -wb")

inter2=bedTools.2in(bed1=annotation,bed2=data.frame(paste("chr",eqtl[,9],sep=""),eqtl[,10],eqtl[,10]+2,eqtl[,8]),opt.string="-wa -wb")

y2=data.frame(table(inter2[,4]))

write.table(all2,"annotation_ALL_SNP",sep="\t",col.names=F,row.names=F,quote=F)


write.table(y2,"annotation_EQTL_SNP.txt",sep="\t",col.names=F,row.names=F,quote=F)


for (i in (1:1000)) { 
x=sample(1:nrow(all2),nrow(inter2),replace=F)
z2=all2[x,]
final2=data.frame(table(z2[,4]))
write.table(final2,"annotation_PERM_EQTL_SNP.txt",quote=F,sep="\t",col.names=F,row.names=F,append=T)
}
```

### Looking at overlap with GWAS database


#tranform eqtl using lift from hg19 to hg38
```{r}
eqtl=read.table("EQTL_filternumber_geno_expression_score.txt",header=T)
snp_lift=data.frame(paste("chr",eqtl[,9],sep=""),eqtl[,10],eqtl[,10]+2,eqtl[,8])
write.table(snp_lift,"Fro_Lift_eqtl.txt",sep="\t",col.names=F,row.names=F,quote=F)
```
#reading in the transform files and overlapping with gwas

```{r}
e_lift=read.table("~/Downloads/hglft_genome_67f4_999d70.bed")
gwas=read.csv("/placenta/analysis_2016/small2_GWAS_snpREF.csv")
gwas=data.frame(paste("chr",gwas[,5],sep=""),gwas[,6],gwas[,6]+1,paste(gwas[,8],gwas[,9],sep="_"),gwas[,8:9],gwas[,1],gwas[,10])

egwas=bedTools.2in(bed1=e_lift,bed2=gwas[,1:3],opt.string="-wa -wb")
list=unique(egwas[,4])
egwas=merge(list,gwas,by.x=1,by.y=6)

gene=data.frame(eqtl[,8],eqtl[,1],eqtl[,21])

egwas=merge(egwas,gene,by=1,all.x=T)
colnames(egwas)=c("SNP","chr","start","stop","gwas_asso","gene_gwas","study","PMID","Refseq","gene_mQTL")

write.table(egwas,"eQTl_gwas_summary.txt",sep="\t",col.names=T,row.names=F,quote=F)

```

### Comparing the placenta specific eQTL with the GTEX reference database. The full database was download from the GTEX webpage [https://www.gtexportal.org/home/datasets]

```{r}
eqtl=read.table("EQTL_filternumber_geno_expression_score.txt",header=T)

list=c("Adipose_Subcutaneous_Analysis.v6p.all_snpgene_pairs.txt","Adipose_Visceral_Omentum_Analysis.v6p.all_snpgene_pairs.txt","Adrenal_Gland_Analysis.v6p.all_snpgene_pairs.txt","Artery_Aorta_Analysis.v6p.all_snpgene_pairs.txt","Artery_Coronary_Analysis.v6p.all_snpgene_pairs.txt","Artery_Tibial_Analysis.v6p.all_snpgene_pairs.txt","Brain_Anterior_cingulate_cortex_BA24_Analysis.v6p.all_snpgene_pairs.txt","Brain_Caudate_basal_ganglia_Analysis.v6p.all_snpgene_pairs.txt","Brain_Cerebellar_Hemisphere_Analysis.v6p.all_snpgene_pairs.txt","Brain_Cerebellum_Analysis.v6p.all_snpgene_pairs.txt","Brain_Cortex_Analysis.v6p.all_snpgene_pairs.txt","Brain_Frontal_Cortex_BA9_Analysis.v6p.all_snpgene_pairs.txt","Brain_Hippocampus_Analysis.v6p.all_snpgene_pairs.txt","Brain_Hypothalamus_Analysis.v6p.all_snpgene_pairs.txt","Brain_Nucleus_accumbens_basal_ganglia_Analysis.v6p.all_snpgene_pairs.txt","Brain_Putamen_basal_ganglia_Analysis.v6p.all_snpgene_pairs.txt","Breast_Mammary_Tissue_Analysis.v6p.all_snpgene_pairs.txt","Cells_EBV-transformed_lymphocytes_Analysis.v6p.all_snpgene_pairs.txt","Cells_Transformed_fibroblasts_Analysis.v6p.all_snpgene_pairs.txt","Colon_Sigmoid_Analysis.v6p.all_snpgene_pairs.txt","Colon_Transverse_Analysis.v6p.all_snpgene_pairs.txt","Esophagus_Gastroesophageal_Junction_Analysis.v6p.all_snpgene_pairs.txt","Esophagus_Mucosa_Analysis.v6p.all_snpgene_pairs.txt","Esophagus_Muscularis_Analysis.v6p.all_snpgene_pairs.txt","Heart_Atrial_Appendage_Analysis.v6p.all_snpgene_pairs.txt","Heart_Left_Ventricle_Analysis.v6p.all_snpgene_pairs.txt","Liver_Analysis.v6p.all_snpgene_pairs.txt","Lung_Analysis.v6p.all_snpgene_pairs.txt","Muscle_Skeletal_Analysis.v6p.all_snpgene_pairs.txt","Nerve_Tibial_Analysis.v6p.all_snpgene_pairs.txt","Ovary_Analysis.v6p.all_snpgene_pairs.txt","Pancreas_Analysis.v6p.all_snpgene_pairs.txt","Pituitary_Analysis.v6p.all_snpgene_pairs.txt","Prostate_Analysis.v6p.all_snpgene_pairs.txt","Skin_Not_Sun_Exposed_Suprapubic_Analysis.v6p.all_snpgene_pairs.txt","Skin_Sun_Exposed_Lower_leg_Analysis.v6p.all_snpgene_pairs.txt","Small_Intestine_Terminal_Ileum_Analysis.v6p.all_snpgene_pairs.txt","Spleen_Analysis.v6p.all_snpgene_pairs.txt","Stomach_Analysis.v6p.all_snpgene_pairs.txt","Testis_Analysis.v6p.all_snpgene_pairs.txt","Thyroid_Analysis.v6p.all_snpgene_pairs.txt","Uterus_Analysis.v6p.all_snpgene_pairs.txt","Vagina_Analysis.v6p.all_snpgene_pairs.txt","Whole_Blood_Analysis.v6p.all_snpgene_pairs.txt")



list2=c("Adipose_Subcutaneous_Analysis","Adipose_Visceral_Omentum_Analysis","Adrenal_Gland_Analysis","Artery_Aorta_Analysis","Artery_Coronary_Analysis","Artery_Tibial_Analysis","Brain_Anterior_cingulate_cortex_BA24_Analysis","Brain_Caudate_basal_ganglia_Analysis","Brain_Cerebellar_Hemisphere_Analysis","Brain_Cerebellum_Analysis","Brain_Cortex_Analysis","Brain_Frontal_Cortex_BA9_Analysis","Brain_Hippocampus_Analysis","Brain_Hypothalamus_Analysis","Brain_Nucleus_accumbens_basal_ganglia_Analysis","Brain_Putamen_basal_ganglia_Analysis","Breast_Mammary_Tissue_Analysis","Cells_EBV-transformed_lymphocytes_Analysis","Cells_Transformed_fibroblasts_Analysis","Colon_Sigmoid_Analysis","Colon_Transverse_Analysis","Esophagus_Gastroesophageal_Junction_Analysis","Esophagus_Mucosa_Analysis","Esophagus_Muscularis_Analysis","Heart_Atrial_Appendage_Analysis","Heart_Left_Ventricle_Analysis","Liver_Analysis","Lung_Analysis","Muscle_Skeletal_Analysis","Nerve_Tibial_Analysis","Ovary_Analysis","Pancreas_Analysis","Pituitary_Analysis","Prostate_Analysis","Skin_Not_Sun_Exposed_Suprapubic_Analysis","Skin_Sun_Exposed_Lower_leg_Analysis","Small_Intestine_Terminal_Ileum_Analysis","Spleen_Analysis","Stomach_Analysis","Testis_Analysis","Thyroid_Analysis","Uterus_Analysis","Vagina_Analysis","Whole_Blood_Analysis")


for(i in c(1:length(list))){
x=read.table(paste("GTEx_Analysis_v6p_all-associations/",list[i],sep=""),header=T)

z=matrix(nrow=nrow(x),ncol=2)
z=data.frame(z)
for(j in c(1:nrow(x))){
a=unlist(strsplit(as.character(x[j,]), "[.]"))[1]
b=unlist(strsplit(as.character(x[j,]), "[_]"))[2]
c=unlist(strsplit(as.character(x[j,]), "[_]"))[3]
d=x[j,4]
z[j,]=data.frame(paste(a,b,c,sep="_"),d)
}

m=merge(eqtl,x,by=1)

if (nrow(m)>0) {
m=data.frame(m,list2[i])
colnames(m)=c("ID","PV","Tissue")

write.table(m,paste("overlap_EQTL",list[i],sep=""),sep="\t",col.names=T,row.names=F,quote=F)
} else {m=c("NA","NA",list2[i])
colnames(m)=c("ID","PV","Tissue")

write.table(m,paste("/overlap_EQTL",list[i],sep=""),sep="\t",col.names=T,row.names=F,quote=F)}
rm(m)
rm(x)
gc()
}
```


### Calculating π1 score from the overlapping files


```{r}
source("https://bioconductor.org/biocLite.R")
biocLite("qvalue")
library(qvalue)

list=c("Adipose_Subcutaneous_Analysis","Adipose_Visceral_Omentum_Analysis","Adrenal_Gland_Analysis","Artery_Aorta_Analysis","Artery_Coronary_Analysis","Artery_Tibial_Analysis","Brain_Anterior_cingulate_cortex_BA24_Analysis","Brain_Caudate_basal_ganglia_Analysis","Brain_Cerebellar_Hemisphere_Analysis","Brain_Cerebellum_Analysis","Brain_Cortex_Analysis","Brain_Frontal_Cortex_BA9_Analysis","Brain_Hippocampus_Analysis","Brain_Hypothalamus_Analysis","Brain_Nucleus_accumbens_basal_ganglia_Analysis","Brain_Putamen_basal_ganglia_Analysis","Breast_Mammary_Tissue_Analysis","Cells_EBV-transformed_lymphocytes_Analysis","Cells_Transformed_fibroblasts_Analysis","Colon_Sigmoid_Analysis","Colon_Transverse_Analysis","Esophagus_Gastroesophageal_Junction_Analysis","Esophagus_Mucosa_Analysis","Esophagus_Muscularis_Analysis","Heart_Atrial_Appendage_Analysis","Heart_Left_Ventricle_Analysis","Liver_Analysis","Lung_Analysis","Muscle_Skeletal_Analysis","Nerve_Tibial_Analysis","Ovary_Analysis","Pancreas_Analysis","Pituitary_Analysis","Prostate_Analysis","Skin_Not_Sun_Exposed_Suprapubic_Analysis","Skin_Sun_Exposed_Lower_leg_Analysis","Small_Intestine_Terminal_Ileum_Analysis","Spleen_Analysis","Stomach_Analysis","Testis_Analysis","Thyroid_Analysis","Uterus_Analysis","Vagina_Analysis","Whole_Blood_Analysis")

for(i in c(1:length(list))){
x=read.table(paste("overlap_EQTL",list[i],".v6p.all_snpgene_pairs.txt",sep=""),sep="\t",header=T)
x=as.numeric(x[,2])
x=na.omit(x)
qobj=qvalue(p=x)
final=data.frame(list[i],1-qobj$pi0)

write.table(final,"EQTL_GTEX_Pi1_score.txt",sep="\t",col.names=F,row.names=F,quote=F,append=T)
}


### Gene set enrichment analysis using Goseq and KEGG database

```{r}

library(goseq) #load goseq package
source("http://bioconductor.org/biocLite.R")
biocLite("geneLenDataBase")
library("geneLenDataBase")

eqtl=read.table("EQTL_filternumber_geno_expression_score.txt",header=T)

data(hg19.refGene.LENGTH)

list=hg19.refGene.LENGTH #file with the length of each gene
list=list[which(!duplicated(list[,2])),]

LOI=eqtl[,1]

LOI=merge(LOI,name[,5:6],by=1)
LOI=LOI[!duplicated(LOI[,2]),1]

a=list
a=cbind(a[,2],rep(0,nrow(a)))
b=which(a[,1]%in%LOI)
a[b,2]<-1
x=as.vector(a[,2])
x=as.numeric(x)
names(x)<-list[,2]

pwf=nullp(x,'h19','refGene',bias.data=list[,3])


biocLite("org.Hs.eg.db")
library("org.Hs.eg.db")


en2eg = as.list(org.Hs.egREFSEQ2EG)
eg2kegg = as.list(org.Hs.egPATH)
grepKEGG = function(id, mapkeys) {
unique(unlist(mapkeys[id], use.names = FALSE))
}
kegg = lapply(en2eg, grepKEGG, eg2kegg)

pathKEGGe=goseq(pwf,"hg19","refGene",gene2cat=kegg,test.cats=c("KEGG"))

```

#Creating the final matrix including pathway names, refseqID and gene names.

'''{r}

xx <- as.list(org.Hs.egPATH2EG)

pathKEGGe=subset(pathKEGGe,pathKEGGe[,2]<=0.05)

tableR=mat.or.vec(20,40) #20 correspond to significant pathways and 40 to the maximun number of gene in one pathway

for (i in c(1:20)){
print(i)
tableR[i,]=c(unique(list2[which(list2[,2]%in%xx[[pathKEGGe[i,1]]]),4]),(rep(0,(40-(length(unique(list2[which(list2[,2]%in%xx[[pathKEGGe[i,1]]]),4])))))))}

source("http://bioconductor.org/biocLite.R")
biocLite("KEGG.db")
library(KEGG.db)

pathR<- as.list(KEGGPATHNAME2ID)


testpathR=apply(as.matrix(pathKEGGe),1,function(each){return(names(pathR[pathR%in%each]))})
a<- data.frame(matrix(unlist(testpathR), nrow=20, byrow=T))


finalKEGG=data.frame(pathKEGGe,a,tableR)


write.table(finalKEGG,"pathKEGG_eQTL.txt",sep="\t",col.names=F,row.names=F,quote=F)
'''